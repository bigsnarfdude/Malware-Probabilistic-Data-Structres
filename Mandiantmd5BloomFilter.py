import pybloomfilter

"""
class ingests MD5 data from NSRLFile and updates bloomfilter
for fast in-memory queries

Example:

    >>> from Mandiantmd5BloomFilter import MD5BloomFilter
    >>> whitelist_filename = '~/Downloads/m-whitelist-1.0.txt'
    >>> size = 10000000
    >>> error = 0.001
    >>> bloom_filename = 'MandiantGood.bloomfilter'
    >>> hash_bloom = MD5BloomFilter(size, error, bloom_filename)
    >>> hash_bloom.process()

    >>> print "11810e96c6bfb6cf582d64890adc174b" in hash_bloom # positive
    >>> print 'testTESTtest' in hash_bloom # false
"""

size = 100000000
error = 0.001
bloom_filename = 'MandiantGood.bloomfilter'
whitelist_filename = '/Users/antigen/Downloads/m-whitelist-1.0.txt'
nsrl_destination_url = 'http://www.mandiant.com/library/RedlineWL//m-whitelist-1.0.zip'

class MD5BloomFilter(pybloomfilter.BloomFilter):

    def __init__(self, capacity, error_rate, filename):
        super(pybloomfilter.BloomFilter, self).__init__(capacity, error_rate, filename, wfilename=whitelist_filename)
        self.wfilename = whitelist_filename
        self.hash_list = []
        self.strip_value = '\n'

    def _readfile(self):
        with open(self.wfilename, 'r') as infile: 
            for line in infile:
                yield line.strip(self.strip_value)
    
    def _process_infile(self, hashes):
        for item in hashes:
            print item
            self.hash_list.append(item)

    def process(self):
        hashes = self._readfile()
        self._process_infile(hashes)
        self.update(self.hash_list)

